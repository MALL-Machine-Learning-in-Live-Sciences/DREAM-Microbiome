for (i in 1:l) {
p.values[[i]] = t.test(disease[,i], control[,i])$p.value
}
names(p.values) = colnames(dCq)[1:l]
p.values = unlist(p.values)
ddCq = deltaDeltaCq(qPCRBatch = qpcr,
maxNACase = 0,
maxNAControl = 0,
hkg = hk,
contrastM = contM,
case = cases,
control = ctrl,
paired = paired,
statCalc = statCalc,
hkgCalc = hkgCalc)
# Check!
# ===
stopifnot(names(p.values) == ddCq$ID)
stopifnot(fData(qpcr)$sondas == ddCq$ID)
ddCq[,2:8] = as.data.frame(apply(ddCq[,2:8], 2, as.numeric))
ddCq$gene = fData(qpcr)$genes
ddCq$pvalues = p.values[match(ddCq$ID, names(p.values))]
ddCq$padj = p.adjust(ddCq$pvalues, method = 'fdr')
res = ddCq[, -c(7,8)]
# View(res)
saveRDS(res, file = paste0('~/git/colab-Cordoba/results/de_mrna_', tissue, '_', cases, '.rds'))
severo = readRDS('~/git/colab-Cordoba/results/de_mrna_P_Severo.rds')
leve = readRDS('~/git/colab-Cordoba/results/de_mrna_B_Leve.rds')
fData(qpcr)
load('d:/Users/jlinares/Downloads/example_dumbble.RData')
require(ggalt)
p2 = ggplot(df, aes(y=fs.technique, x=train, xend=test, colour=ml.model)) +
geom_dumbbell(size=3, colour_x = "#440154FF", colour_xend = "#FDE725FF", show.legend = T,
dot_guide=TRUE, dot_guide_size=0.25, position=position_dodgev(height = 0.4)) +
labs(x=NULL, y=NULL, title=NULL,subtitle=NULL) +
theme_minimal() +
theme(panel.grid.major.x=element_line(size=0.05),legend.title = element_blank())
# Scatter Plot GSEA
# ===
resB_severo = readRDS('~/git/colab-Cordoba/data/GSEA_B_severo.rds')
resB_severo$severity = 'severo'
resB_leve = readRDS('~/git/colab-Cordoba/data/GSEA_B_leve.rds')
resB_leve$severity = 'leve'
resB = rbind.data.frame(resB_severo, resB_leve)
resB.sig = resB[which(resB$pval < 0.001),]
resB.sig$shape = ifelse(resB.sig$NES < 0, 'Negative', 'Positive')
resB.sig$tissue = 'biopsia'
resP_severo = readRDS('~/git/colab-Cordoba/data/GSEA_P_severo.rds')
resP_severo$severity = 'severo'
resP_leve = readRDS('~/git/colab-Cordoba/data/GSEA_P_leve.rds')
resP_leve$severity = 'leve'
resP = rbind.data.frame(resP_severo, resP_leve)
resP.sig = resP[which(resP$pval < 0.005),]
resP.sig$shape = ifelse(resP.sig$NES < 0, 'Negative', 'Positive')
resP.sig$tissue = 'plasma'
res = rbind.data.frame(resB.sig, resP.sig)
res$padj.sig = ifelse(res$padj < 0.05, '*', 'ns')
library(ggplot2)
require(viridis)
ggplot(res,
aes(y = pathway,
x = severity,
size = -log10(pval))) +
geom_point(aes(fill = abs(NES),
shape = shape,
color = padj.sig), alpha = 1.0) +
scale_shape_manual(values = c(25, 24)) +
facet_wrap(~tissue) +
# geom_tile(aes(width = Inf, fill = subset), alpha = 0.4) +
theme_minimal() +
theme(axis.text.y = element_text(size = 5))
# Scatter Plot GSEA
# ===
resB_severo = readRDS('~/git/colab-Cordoba/data/GSEA_B_severo.rds')
resB_severo$severity = 'severo'
resB_leve = readRDS('~/git/colab-Cordoba/data/GSEA_B_leve.rds')
resB_leve$severity = 'leve'
resB = rbind.data.frame(resB_severo, resB_leve)
resB.sig = resB[which(resB$pval < 0.001),]
resB.sig$shape = ifelse(resB.sig$NES < 0, 'Negative', 'Positive')
resB.sig$tissue = 'biopsia'
resP_severo = readRDS('~/git/colab-Cordoba/data/GSEA_P_severo.rds')
resP_severo$severity = 'severo'
resP_leve = readRDS('~/git/colab-Cordoba/data/GSEA_P_leve.rds')
resP_leve$severity = 'leve'
resP = rbind.data.frame(resP_severo, resP_leve)
resP.sig = resP[which(resP$pval < 0.005),]
resP.sig$shape = ifelse(resP.sig$NES < 0, 'Negative', 'Positive')
resP.sig$tissue = 'plasma'
res = rbind.data.frame(resB.sig, resP.sig)
res$padj.sig = ifelse(res$padj < 0.05, '*', 'ns')
library(ggplot2)
require(viridis)
ggplot(res,
aes(y = pathway,
x = severity,
size = -log10(pval))) +
geom_point(aes(fill = abs(NES),
shape = shape,
color = padj.sig), alpha = 1.0) +
scale_shape_manual(values = c(25, 24)) +
facet_wrap(~tissue) +
# geom_tile(aes(width = Inf, fill = subset), alpha = 0.4) +
theme_minimal() +
theme(axis.text.y = element_text(size = 5))
require(haven)
dataset = read_sav('d:/Users/jlinares/Downloads/epidural.sav')
View(dataset)
class(dataset)
dataset = as.data.frame(dataset)
class(dataset)
dataset$EPIDURAL
prop.table(dataset$EPIDURAL)
table(dataset$EPIDURAL)
pie(table(dataset$EPIDURAL),
labels = c('Si', 'No'),
main = 'Diagrama de sectores')
table(dataset$EPIDURAL)
dataset$EPIDURAL
table(dataset$EPIDURAL)
pie(table(dataset$EPIDURAL),
labels = c('NO epidural', 'Si epidural'),
main = 'Diagrama de sectores')
## Diagrama de barras
barplot(table(dataset$EPIDURAL))
## Diagrama de barras
barplot(table(dataset$EPIDURAL), xlab = c('No epidural', 'Si epidural'))
## Diagrama de barras
barplot(table(dataset$EPIDURAL), xlim = c('NO', 'Si'))
# Ej2
## Histograma
hist(dataset$edad, 100)
## Diagrama de cajas
boxplot(dataset$edad)
# Ej3
## Grafica das medias
plot(dataset$OXITOCIN, dataset$DILATACI)
# Ej3
## Grafica das medias
boxplot(dataset$OXITOCIN, dataset$DILATACI)
require(gplots)
## Grafica das medias
plotmeans(OXITOCIN ~ DILATACI, data = dataset, frame = FALSE)
require(gplots)
## Grafica das medias
plotmeans(OXITOCIN ~ DILATACI, data = dataset, frame = FALSE)
## Grafica das medias
plotmeans(DILATACI ~ OXITOCIN , data = dataset, frame = FALSE)
dataset$OXITOCIN
View(dataset)
plot(dataset$DILATACI, dataset$EXPULSIV)
plot(dataset$DILATACI, dataset$EXPULSIV)
View(dataset)
boxplot(dataset$TIPOPAR, dataset$edad)
dataset$TIPOPAR
boxplot(dataset$TIPOPAR, dataset$edad)
boxplot(dataset$edad, dataset$TIPOPAR)
table(dataset$edad, dataset$TIPOPAR)
table(dataset$edad, as.character(dataset$TIPOPAR))
boxplot(dataset$edad, as.character(dataset$TIPOPAR))
dataset$TIPOPAR
class(dataset$TIPOPAR)
as.vector(dataset$TIPOPAR)
boxplot(dataset$edad, as.vector(dataset$TIPOPAR))
boxplot(as.vector(dataset$edad), as.vector(dataset$TIPOPAR))
boxplot(as.vector(dataset$edad), as.vector(dataset$TIPOPAR))
require(ggpubr)
ggboxplot(dataset, x = 'TIPOPAR', y = 'edad')
require(ggpubr)
ggboxplot(dataset, x = 'TIPOPAR', y = 'edad')
xx = readRDS('d:/Users/jlinares/Documents/projects/SurvivalTCGA-COAD/annotations/annot_GPL570_signature.rds')
xx
xx = readRDS('d:/Users/jlinares/Documents/projects/SurvivalTCGA-COAD/annotations/signatures.rds')
xx
xx$ours
xx = readRDS('d:/Users/jlinares/Documents/projects/SurvivalTCGA-COAD/annotations/signaturesv2.rds')
xx
xx$ours
# Load data
setwd('~/git/DREAM-Microbiome/')
# Alpha diversity
alpha = read.csv('extdata/alpha_diversity/alpha_diversity.csv', header = T, row.names = 1)
head(alpha)
# Metadata
meta = read.csv('extdata/metadata/metadata.csv', header = T)
head(meta)
length(uinique(meta$participant_id))
length(unique(meta$participant_id))
length(unique(meta$participant_id))
table(meta$participant_id)
summary(table(meta$participant_id))
max(table(meta$participant_id))
min(table(meta$participant_id))
which(table(meta$participant_id) > 2)
length(which(table(meta$participant_id) > 2))
length(which(table(meta$participant_id) > 1))
length(which(table(meta$participant_id) == 1))
head(meta)
meta[which(meta$participant_id == 'A00004'), ]
no.term = meta[which(meta$was_term == F),]
no.term = meta[which(meta$was_term == 'False'),]
length(which(table(no.term$participant_id) > 2))
length(which(table(no.term$participant_id) > 1))
length(which(table(no.term$participant_id) > 0))
tax = read.csv('extdata/taxonomy/taxonomy_relabd.species.csv', header = T)
tax[1:5, 1:5]
tax = read.csv('extdata/taxonomy/taxonomy_relabd.species.csv', header = T, row.names = 1)
tax[1:5, 1:5]
meta[which(meta$participant_id == 'A00004'), ]$specimen
ids = meta[which(meta$participant_id == 'A00004'), ]$specimen
tax.d = tax[match(ids, rownames(tax)),]
ids
head(meta)
deli = meta[which(meta$participant_id == 'A00004'), ]$delivery_wk
deli
collect = meta[which(meta$participant_id == 'A00004'), ]$collect_wk
collect = meta[which(meta$participant_id == 'A00004'), ]$collect_wk
collect
res = apply(tax.d, 2, function(x) corr(x, collect))
res = apply(tax.d, 2, function(x) cor(x, collect))
warnings()
hist(res)
res
res = na.omit(res)
res
res = apply(tax.d, 2, function(x) cor(x, collect))
hist(res)
res = res[na.omit(res)]
res = na.omit(res)
head(res)
plot(tax.d$Acidovorax.caeni, collect)
plot(collect, tax.d$Acidovorax.caeni)
max(res)
which.max(res)
plot(collect, tax.d$Prevotella.disiens)
order(abs(res))
res[order(abs(res))]
res[order(abs(res), decreasing = F)]
res[order(abs(res), decreasing = T)]
head(res[order(abs(res), decreasing = T)])
plot(collect, tax.d$Capnocytophaga)
plot(collect, tax.d$Lachnospira.eligens)
plot(collect, tax.d$Conchiformibius.steedae)
plot(collect, tax.d$Fenollaria.massiliensis.timonensis)
plot(collect, tax.d$Streptococcus.parasanguinis)
head(no.term)
ids = meta[which(meta$participant_id == 'A00008'), ]$specimen
ids
collect = meta[which(meta$participant_id == 'A00008'), ]$collect_wk
tax.d = tax[match(ids, rownames(tax)),]
res = apply(tax.d, 2, function(x) cor(x, collect))
hist(res)
res = na.omit(res)
head(res[order(abs(res), decreasing = T)])
plot(collect, tax.d$Treponema.lecithinolyticum)
plot(collect, tax.d$Gardnerella.vaginalis)
plot(collect, tax.d$unclassified.Bacteroidales)
plot(collect, tax.d$Chloroflexi..Chloroflexi.)
# Metadata
meta = read.csv('extdata/metadata/metadata.csv', header = T)
no.term = meta[which(meta$was_term == 'False'),]
length(which(table(no.term$participant_id) > 2))
length(which(table(no.term$participant_id) > 3))
which(table(no.term$participant_id) > 2)
names(which(table(no.term$participant_id) > 2))
participants = names(which(table(no.term$participant_id) > 2))
visits = list()
visits = list()
for (i in seq_along(participants)) {
visits[[i]] = meta[which(meta$participant_id == participants[i]), ]$specimen
}
names(visits) = participants
heads(visits)
head(visits)
# species taxonomic data with relative abundance
tax = read.csv('extdata/taxonomy/taxonomy_relabd.species.csv', header = T, row.names = 1)
tax[1:5, 1:5]
j = 1
# calculate correlation between species and collect_wk
j = 1
collect = meta[which(meta$participant_id == names(visits)[j]), ]$collect_wk
collect
meta[which(meta$participant_id == names(visits)[j]), ]
names(visits)[j]
visits[[j]]
tax.d = tax[match(visits[[j]], rownames(tax)),]
tax.d
tax.d[,1:5]
# calculate correlation between species and collect_wk
# j = 1
corrs = list()
for (j in seq_along(visits)) {
collect = meta[which(meta$participant_id == names(visits)[j]), ]$collect_wk
tax.d = tax[match(visits[[j]], rownames(tax)),]
res = apply(tax.d, 2, function(x) cor(x, collect))
res = na.omit(res)
res = res[order(abs(res), decreasing = T)]
corrs[[j]] = res
}
names(corrs) = names(visits)
# calculate correlation between species and collect_wk
# j = 1
corrs = list()
for (j in seq_along(visits)) {
collect = meta[which(meta$participant_id == names(visits)[j]), ]$collect_wk
tax.d = tax[match(visits[[j]], rownames(tax)),]
res = apply(tax.d, 2, function(x) cor(x, collect))
res = na.omit(res)
res = res[order(abs(res), decreasing = T)]
corrs[[j]] = res
print(paste0('Calculated corr for: ', names(visits)[j]))
}
# calculate correlation between species and collect_wk
# j = 1
corrs = list()
for (j in seq_along(visits)) {
collect = meta[which(meta$participant_id == names(visits)[j]), ]$collect_wk
tax.d = tax[match(visits[[j]], rownames(tax)),]
res = apply(tax.d, 2, function(x) cor(x, collect))
res = na.omit(res)
res = res[order(abs(res), decreasing = T)]
corrs[[j]] = res
print(paste0('Calculated corr for: ', names(visits)[j], ' ', j, '/', length(visitis)))
}
# calculate correlation between species and collect_wk
# j = 1
corrs = list()
for (j in seq_along(visits)) {
collect = meta[which(meta$participant_id == names(visits)[j]), ]$collect_wk
tax.d = tax[match(visits[[j]], rownames(tax)),]
res = apply(tax.d, 2, function(x) cor(x, collect))
res = na.omit(res)
res = res[order(abs(res), decreasing = T)]
corrs[[j]] = res
print(paste0('Calculated corr for: ', names(visits)))
}
# calculate correlation between species and collect_wk
# j = 1
corrs = list()
for (j in seq_along(visits)) {
collect = meta[which(meta$participant_id == names(visits)[j]), ]$collect_wk
tax.d = tax[match(visits[[j]], rownames(tax)),]
res = apply(tax.d, 2, function(x) cor(x, collect))
res = na.omit(res)
res = res[order(abs(res), decreasing = T)]
corrs[[j]] = res
print(paste0('Calculated corr for: ', names(visits)[j]))
}
names(corrs) = names(visits)
head(corrs)
corrs[[1]]
hist(corrs[[1]])
hist(corrs$A00008)
hist(corrs[[2]])
lapply(corrs, function(x) length(x))
length(corrs[[2]])
corrs$I00162
lapply(corrs, function(x) length(x))
meta[which(meta$participant_id == 'I00534'), ]$collect_wk
meta[which(meta$participant_id == 'I00534'), ]
meta[which(meta$participant_id == 'I00529'), ]
meta[which(meta$participant_id == 'I00467'), ]
meta[which(meta$participant_id == 'I00007'), ]
# Metadata
meta = read.csv('extdata/metadata/metadata.csv', header = T)
no.term = meta[which(meta$was_term == 'False' & meta$project != 'I'),]
table(no.term$project)
# Select visits of preterm participants with more than 2 visits
participants = names(which(table(no.term$participant_id) > 2))
visits = list()
for (i in seq_along(participants)) {
visits[[i]] = meta[which(meta$participant_id == participants[i]), ]$specimen
}
names(visits) = participants
head(visits)
# species taxonomic data with relative abundance
tax = read.csv('extdata/taxonomy/taxonomy_relabd.species.csv', header = T, row.names = 1)
tax[1:5, 1:5]
# calculate correlation between species and collect_wk
# j = 1
corrs = list()
for (j in seq_along(visits)) {
collect = meta[which(meta$participant_id == names(visits)[j]), ]$collect_wk
tax.d = tax[match(visits[[j]], rownames(tax)),]
res = apply(tax.d, 2, function(x) cor(x, collect))
res = na.omit(res)
res = res[order(abs(res), decreasing = T)]
corrs[[j]] = res
print(paste0('Calculated corr for: ', names(visits)[j]))
}
names(corrs) = names(visits)
length(corrs[[2]])
hist(unlist(corrs), 100)
lapply(corrs, function(x) length(x))
corrs$A00008
which(abs(corrs$A00008) > 0.5)
# calculate correlation between species and collect_wk
# j = 1
corrs = list()
for (j in seq_along(visits)) {
collect = meta[which(meta$participant_id == names(visits)[j]), ]$collect_wk
tax.d = tax[match(visits[[j]], rownames(tax)),]
res = apply(tax.d, 2, function(x) cor(x, collect))
res = na.omit(res)
res = res[order(abs(res), decreasing = T)]
res = which(abs(res) > 0.5)               # select only those species with abs(corr) > 0.5
corrs[[j]] = res
print(paste0('Calculated corr for: ', names(visits)[j]))
}
names(corrs) = names(visits)
hist(unlist(corrs), 100)
# calculate correlation between species and collect_wk
# j = 1
corrs = list()
for (j in seq_along(visits)) {
collect = meta[which(meta$participant_id == names(visits)[j]), ]$collect_wk
tax.d = tax[match(visits[[j]], rownames(tax)),]
res = apply(tax.d, 2, function(x) cor(x, collect))
res = na.omit(res)
res = res[order(abs(res), decreasing = T)]
res = res[which(abs(res) > 0.5)]               # select only those species with abs(corr) > 0.5
corrs[[j]] = res
print(paste0('Calculated corr for: ', names(visits)[j]))
}
names(corrs) = names(visits)
hist(unlist(corrs), 100)
lapply(corrs, function(x) length(x))
names(unlist(corrs))
head(unlist(corrs))
heads(gsub(names((unlist(corrs))), 8, 300))
head(gsub(names((unlist(corrs))), 8, 300))
head(gsub( 8, 300, names((unlist(corrs)))))
head(gsub( 8, 30, names((unlist(corrs)))))
head(substr(names((unlist(corrs))), 8, 300))
species = substr(names((unlist(corrs))), 8, 300)
table(species)
head(table(species))
which.max(table(species))
class(table(species))
as.vector(table(species))
head(table(species))
which(table(species) > 20)
table(species)[which(table(species) > 20)]
table(species)[which(table(species) > 10)]
table(species)[which(table(species) > 20)]
# Metadata
meta = read.csv('extdata/metadata/metadata.csv', header = T)
head(meta)
length(unique(meta$participant_id))
table(meta$participant_id)
no.term = meta[which(meta$was_term == 'False' & meta$project != 'I'),]            # project I no has longitudinal data
length(unique(no.term$participant_id))
# Select visits of preterm participants with more than 2 visits
participants = names(which(table(no.term$participant_id) > 2))
visits = list()
for (i in seq_along(participants)) {
visits[[i]] = meta[which(meta$participant_id == participants[i]), ]$specimen
}
names(visits) = participants
head(visits)
# species taxonomic data with relative abundance
tax = read.csv('extdata/taxonomy/taxonomy_relabd.species.csv', header = T, row.names = 1)
tax[1:5, 1:5]
head(meta)
meta[which(meta$participant_id == 'A00004'), ]
# calculate correlation between species and collect_wk
# j = 1
corrs = list()
# calculate correlation between species and collect_wk
j = 1
collect = meta[which(meta$participant_id == names(visits)[j]), ]$collect_wk
collect
names(visits)[j]
tax.d = tax[match(visits[[j]], rownames(tax)),]
tax.d[1:5, 1:5]
tax.d[1:6, 1:5]
collect
res = apply(tax.d, 2, function(x) cor(x, collect))
head(res)
res = na.omit(res)
head(res)
hist(res, 100)
plot(collect, tax.d$Alloprevotella.tannerae)
res = res[which(abs(res) > 0.5)]               # select only those species with abs(corr) > 0.5
res
plot(collect, tax.d$Atopobium.deltae)
plot(collect, tax.d$Casaltella)
corrs = list()
for (j in seq_along(visits)) {
collect = meta[which(meta$participant_id == names(visits)[j]), ]$collect_wk
tax.d = tax[match(visits[[j]], rownames(tax)),]
res = apply(tax.d, 2, function(x) cor(x, collect))
res = na.omit(res)
res = res[order(abs(res), decreasing = T)]
res = res[which(abs(res) > 0.5)]               # select only those species with abs(corr) > 0.5
corrs[[j]] = res
print(paste0('Calculated corr for: ', names(visits)[j]))
}
names(corrs) = names(visits)
head(corrs)
hist(unlist(corrs), 100)
lapply(corrs, function(x) length(x))
species = substr(names((unlist(corrs))), 8, 300)
table(species)[which(table(species) > 20)]
table(species)[which(table(species) > 10)]
table(species)[which(table(species) > 20)]
table(species)[which(table(species) > 20)]
plot(collect, tax.d$Atopobium.vaginae)
plot(collect, tax.d$Fenollaria.massiliensis.timonensis)
plot(collect, tax.d$Gardnerella.vaginalis)
plot(collect, tax.d$Ureaplasma)
table(species)[which(table(species) > 10)]
